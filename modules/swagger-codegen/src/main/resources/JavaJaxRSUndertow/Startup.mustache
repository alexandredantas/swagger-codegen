package {{apiPackage}};

import io.undertow.Undertow;
import io.undertow.UndertowOptions;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentInfo;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Objects;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.servlet.DispatcherType;
import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;
import org.jboss.resteasy.spi.ResteasyDeployment;

public class Startup {

    private static final String STORE_PASSWORD = "STORE_PASSWORD";
    private static final String HTTP_PORT_PROPERTY = "HTTP_MICROSERVICE_PORT";
    private static final String HTTPS_PORT_PROPERTY = "HTTPS_MICROSERVICE_PORT";
    private static final String ENABLE_HTTPS = "ENABLE_HTTPS";
    private static final String KEYSTORE_PATH = "KEYSTORE_PATH";
    private static final String TRUSTSTORE_PATH = "TRUSTSTORE_PATH";

    public static void main(String... args) throws Exception {
        String httpPortValue = System.getenv(HTTP_PORT_PROPERTY) != null ? 
                System.getenv(HTTP_PORT_PROPERTY) : "9000";
        String keyStorePath = System.getenv(KEYSTORE_PATH);
        String trustStorePath = System.getenv(TRUSTSTORE_PATH);
        
        boolean enableHttps = System.getenv(ENABLE_HTTPS) != null ? 
                Boolean.parseBoolean(System.getenv(HTTPS_PORT_PROPERTY)) : false;
        
        int httpPort = Integer.parseInt(httpPortValue);
        
        Undertow.Builder builder = Undertow.builder()
                        .setServerOption(UndertowOptions.ENABLE_HTTP2, true)
                        .setServerOption(UndertowOptions.ENABLE_SPDY, true)
                        .addHttpListener(httpPort, "0.0.0.0");
        
        if (enableHttps && Objects.nonNull(keyStorePath) && Objects.nonNull(trustStorePath)){
            String httpsPortValue = System.getenv(HTTPS_PORT_PROPERTY) != null ? 
                    System.getenv(HTTPS_PORT_PROPERTY) : "9443";
            
            int httpsPorts = Integer.parseInt(httpsPortValue);
            
            SSLContext sslContext = createSSLContext(loadKeyStore(keyStorePath),
                loadKeyStore(trustStorePath));
            builder.addHttpsListener(httpsPorts, "0.0.0.0", sslContext);
        }

        UndertowJaxrsServer server = new UndertowJaxrsServer().
                start(builder);

        ResteasyDeployment restEasy = new ResteasyDeployment();
        restEasy.setInjectorFactoryClass("org.jboss.resteasy.cdi.CdiInjectorFactory");
        restEasy.setApplication(new App());

        DeploymentInfo deployment = server.undertowDeployment(restEasy)
                .setDeploymentName("Service")
                .addListeners(Servlets.listener(org.jboss.weld.environment.servlet.Listener.class))
                .addFilter(Servlets.filter("xorigin", ApiOriginFilter.class))
                .addFilterUrlMapping("xorigin", "/*", DispatcherType.REQUEST)
                .setClassLoader(Startup.class.getClassLoader())
                .setContextPath("/");

        server.deploy(deployment);
        server.start();
    }

    private static KeyStore loadKeyStore(String name) throws Exception {
        final InputStream stream = new FileInputStream(new File(name));

        try (InputStream is = stream) {
            KeyStore loadedKeystore = KeyStore.getInstance("JKS");
            loadedKeystore.load(is, password(name));
            return loadedKeystore;
        }
    }

    private static char[] password(String name) {
        return Objects.nonNull(System.getenv(STORE_PASSWORD)) ? System.getenv(STORE_PASSWORD).toCharArray() : 
                "password".toCharArray();
    }

    private static SSLContext createSSLContext(final KeyStore keyStore, final KeyStore trustStore) throws Exception {
        KeyManager[] keyManagers;
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keyStore, password("key"));
        keyManagers = keyManagerFactory.getKeyManagers();

        TrustManager[] trustManagers;
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);
        trustManagers = trustManagerFactory.getTrustManagers();

        SSLContext sslContext;
        sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagers, trustManagers, SecureRandom.getInstanceStrong());

        return sslContext;
    }
}
