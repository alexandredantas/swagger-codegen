package {{package}};

import javax.inject.Inject;
import {{modelPackage}}.*;
import {{package}}.{{classname}}Service;
import {{package}}.factories.{{classname}}ServiceFactory;

{{#imports}}import {{import}};
{{/imports}}

import java.util.List;
import {{package}}.NotFoundException;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Path("/{{baseName}}")
{{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
{{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
{{#operations}}
public class {{classname}}  {

    private final {{classname}}ServiceFactory factory;

    public {{classname}}() {
        this(null);
    }

    @Inject
    public {{classname}}({{classname}}ServiceFactory factory) {
        this.factory = factory;
    }

    private {{classname}}Service delegate(){ 
        return factory.get{{classname}}();
    }

{{#operation}}
    {{#subresourceOperation}}@Path("{{path}}"){{/subresourceOperation}}
    @{{httpMethod}}
    {{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
    {{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
    public Response {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}})
    throws NotFoundException {
        return delegate().{{nickname}}({{#allParams}}{{#isFile}}inputStream, fileDetail{{/isFile}}{{^isFile}}{{paramName}}{{/isFile}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    }
{{/operation}}

}
{{/operations}}